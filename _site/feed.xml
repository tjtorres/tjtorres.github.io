<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Random Projections</title>
    <description>This blog details my data science and data visualization projects and thoughts.</description>
    <link>localhost:4000/</link>
    <atom:link href="localhost:4000/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Sun, 22 Mar 2015 21:42:02 -0700</pubDate>
    <lastBuildDate>Sun, 22 Mar 2015 21:42:02 -0700</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>Inside SentiMap.us: Part 1</title>
        <description>&lt;h1 id=&quot;introduction&quot;&gt;Introduction&lt;/h1&gt;

&lt;p&gt;This is the first in a series of planned future posts describing the building of my web app project &lt;a href=&quot;http://sentimap.us&quot;&gt;SentiMap.us&lt;/a&gt;. The basic premise behind SentiMap is to plot localized trends in mood via realtime sentiment analysis of a geotagged Twitter stream. This post will focus mainly on the backend sentiment analysis portion of the project and take you through streaming tweets, feature extraction, and classification.&lt;/p&gt;

&lt;p&gt;Without getting too far into the details just yet, the main functionality behind the sentiment classification, in this case, comes from vectorizing tweets via Word2Vec to construct tweet feature vectors and then training a random forest classifier on a &lt;a href=&quot;http://help.sentiment140.com/for-students&quot;&gt;pre-classified tweet corpus&lt;/a&gt;. We will cover each of these topics in greater detail later, but for now letâ€™s focus on the setup.&lt;/p&gt;

&lt;p&gt;To that end we will start off needing a few tools:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Tweepy (Python library for dealing with the Twitter API)&lt;/li&gt;
  &lt;li&gt;NLTK (Natural Language Toolkit used for stopwords)&lt;/li&gt;
  &lt;li&gt;gensim (Python library containing Word2Vec algorithm)&lt;/li&gt;
  &lt;li&gt;Pandas (for managing the Tweet training corpus)&lt;/li&gt;
  &lt;li&gt;Scikit-Learn (providing machine learning functionality)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The basic flow follows two main lines:&lt;/p&gt;

&lt;p&gt;####Training the Classifier####&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Load the GoogleNews pre-trained Word2Vec vectors.&lt;/li&gt;
  &lt;li&gt;Import and format/clean the Sentiment140 Twitter Corpus.&lt;/li&gt;
  &lt;li&gt;Vectorize the training data tweets.&lt;/li&gt;
  &lt;li&gt;Train a classifier on the cleaned corpus data(I chose a Random Forest).&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;####Prediciting Tweet Sentiment From Stream####&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Grab JSON formatted output from the Stream endpoint of the Twitter API&lt;/li&gt;
  &lt;li&gt;Strip/clean tweet text.&lt;/li&gt;
  &lt;li&gt;Vectorize cleaned tweet.&lt;/li&gt;
  &lt;li&gt;Predict sentiment and store data in database.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Test.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;
def function():
	here = []
	for i in range(7):
		here.append(i)

function()
&lt;/code&gt;&lt;/pre&gt;
</description>
        <pubDate>Mon, 23 Mar 2015 01:00:00 -0700</pubDate>
        <link>localhost:4000/2015/03/23/sentimap/</link>
        <guid isPermaLink="true">localhost:4000/2015/03/23/sentimap/</guid>
        
        
      </item>
    
  </channel>
</rss>
